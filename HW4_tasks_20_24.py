# | Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n - кол-во элементов первого множества. m - кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств. | 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12 |
# | --- | --- |

# Задача 22:
# Даны два неупорядоченных набора целых чисел(может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа,
# которые встречаются в обоих наборах.
# Пользователь вводит 2 числа.
# n - кол-во элементов первого набора.
# m - кол-во элементов второго набора.
# Значения генерируются случайным образом.

# Input: 11 6
# (значения сгенерированы случайным образом
#  2 4 6 8 10 12 10 8 6 4 2
#  3 6 9 12 15 18)

# Output: 11 6
# 6 12



# import random


# def EnterNumber(n):
#     while True:
#         try:
#             if int(n) == 0:
#                 n = input(
#                     'Давайте 0 все же вводить те будем, введите больше ноля: ')
#             if int(n) < 0:
#                 n = input('Введите целое положительное число: ')
#             if int(n) > 0:
#                 break

#         except:
#             n = input('Совсем неправильно, повторите ввод: ')
#     return int(n)


# def ArrayGererator(k):
#     m = []
#     i = 0
#     for i in range(0, k):
#         m.append(random.randint(0, 50))
#     return m


# def ArraySort(g):
#     if len(g) > 1:
#         l = 0
#         while l < len(g):
#             for i in range(0, len(g) - 1):
#                 if g[i] > g[i + 1]:
#                     k = g.pop(i+1)
#                     g.insert(i, k)
#             l += 1
#     return g


# numFyrstLengthArray = EnterNumber(input('Введите длинну первого массива: '))
# numSecondLengthArray = EnterNumber(input('Введите длинну первого массива: '))

# fyrstArray = ArrayGererator(numFyrstLengthArray)
# print('Первый массив: ', fyrstArray)

# secondArray = ArrayGererator(numSecondLengthArray)
# print('Второй массив: ', secondArray)

# fyrstSet = set(fyrstArray)
# secondSet = set(secondArray)
# crossSet = secondSet.intersection(fyrstSet)

# arrayCross = list(crossSet)

# if arrayCross == []:
#     print('А числа присутствующие в обоих массивах отсутствуют')
# else:
#     print('Числа присутствующие в обоих массивах: ', ArraySort(arrayCross))





# | Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растет на круглой грядке, причем кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растет N кустов.
# Эти кусты обладают разной урожайностью, 
# поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, 
# которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки. 
# | 4 -> 1 2 3 4
# 9 |

# Задача 24:
# В фермерском хозяйстве в Карелии выращивают чернику. Она растет на круглой грядке, 
# причем кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растет N кустов. Эти кусты обладают разной урожайностью, 
# поэтому ко времени сбора на них выросло различное число ягод – на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.

# Напишите программу для нахождения максимального числа ягод, 
# которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

# Input: 4
# (значения сгенерированы случайным образом
#  4 2 3 1)

# Output: 9



import random


def EnterNumber(n):
    while True:
        try:
            if int(n) == 0:
                n = input(
                    'Давайте 0 все же вводить те будем, введите больше ноля: ')
            if int(n) < 0:
                n = input('Введите целое положительное число: ')
            if int(n) > 0:
                break

        except:
            n = input('Совсем неправильно, повторите ввод: ')
    return int(n)


def ArrayGererator(k):
    m = {}
    i = 1
    for i in range(1, k + 1):
        m.update({i: random.randint(1, 10)})
        
    return m

def maxPluck(m):
    sum = 0
    sumFyrst = 0
    if len(m) == 1:
        sum = m[1]
    if len(m) == 2:
        for i in range(1,len(m)+1):
            sum += m[i]
    if len(m) > 2:
        l = list(m.keys())
        j = 0
        while j < len(m):
            sumFyrst = m[l[0]] + m[l[1]] + m[l[2]]
            k = l.pop(0)
            l.append(k)
            j += 1
            if sumFyrst > sum:
                sum = sumFyrst
    return sum



numBush = EnterNumber(input('Введите колличество кустов: '))
bush = ArrayGererator(numBush)
print(bush)

print('Максимальное колличество ягод собранные за один раз', maxPluck(bush))
